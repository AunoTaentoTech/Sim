import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

class PlanetDatabase {
  static final PlanetDatabase instance = PlanetDatabase._init();
  static Database? _database;

  PlanetDatabase._init();

  Future<Database> get database async {
    if (_database != null) return _database!;

    _database = await _initDB('planets.db');
    return _database!;
  }

  Future<Database> _initDB(String filePath) async {
    final dbPath = await getDatabasesPath();
    final path = join(dbPath, filePath);

    return await openDatabase(path, version: 1, onCreate: _createDB);
  }

  Future _createDB(Database db, int version) async {
    await db.execute('''
    CREATE TABLE planets (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      distance REAL NOT NULL,
      size REAL NOT NULL,
      nickname TEXT
    )
    ''');
  }

  Future<int> create(Planet planet) async {
    final db = await instance.database;
    return await db.insert('planets', planet.toMap());
  }

  Future<List<Planet>> readAll() async {
    final db = await instance.database;
    final result = await db.query('planets');

    return result.map((json) => Planet.fromMap(json)).toList();
  }

  Future<int> update(Planet planet) async {
    final db = await instance.database;
    return await db.update('planets', planet.toMap(), where: 'id = ?', whereArgs: [planet.id]);
  }

  Future<int> delete(int id) async {
    final db = await instance.database;
    return await db.delete('planets', where: 'id = ?', whereArgs: [id]);
  }

  Future close() async {
    final db = await instance.database;
    db.close();
  }
}
